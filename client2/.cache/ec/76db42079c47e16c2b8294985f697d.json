{"id":"node_modules/@colyseus/schema/lib/Schema.js","dependencies":[{"name":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/package.json","includedInParent":true,"mtime":1601631889011},{"name":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/package.json","includedInParent":true,"mtime":1601630314618},{"name":"./spec","loc":{"line":17,"column":21},"parent":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/spec.js"},{"name":"./encoding/encode","loc":{"line":18,"column":21},"parent":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/encoding/encode.js"},{"name":"./encoding/decode","loc":{"line":19,"column":21},"parent":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/encoding/decode.js"},{"name":"./types/ArraySchema","loc":{"line":20,"column":28},"parent":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/types/ArraySchema.js"},{"name":"./types/MapSchema","loc":{"line":21,"column":26},"parent":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/types/MapSchema.js"},{"name":"./ChangeTree","loc":{"line":22,"column":27},"parent":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/ChangeTree.js"},{"name":"./events/EventEmitter","loc":{"line":23,"column":29},"parent":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/dhruvibakeri/Documents/CS4500/fish/client2/node_modules/@colyseus/schema/lib/events/EventEmitter.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Schema = void 0;\nvar spec_1 = require(\"./spec\");\nvar encode = require(\"./encoding/encode\");\nvar decode = require(\"./encoding/decode\");\nvar ArraySchema_1 = require(\"./types/ArraySchema\");\nvar MapSchema_1 = require(\"./types/MapSchema\");\nvar ChangeTree_1 = require(\"./ChangeTree\");\nvar EventEmitter_1 = require(\"./events/EventEmitter\");\nvar EncodeSchemaError = /** @class */ (function (_super) {\n    __extends(EncodeSchemaError, _super);\n    function EncodeSchemaError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EncodeSchemaError;\n}(Error));\nfunction assertType(value, type, klass, field) {\n    var typeofTarget;\n    var allowNull = false;\n    switch (type) {\n        case \"number\":\n        case \"int8\":\n        case \"uint8\":\n        case \"int16\":\n        case \"uint16\":\n        case \"int32\":\n        case \"uint32\":\n        case \"int64\":\n        case \"uint64\":\n        case \"float32\":\n        case \"float64\":\n            typeofTarget = \"number\";\n            if (isNaN(value)) {\n                console.log(\"trying to encode \\\"NaN\\\" in \" + klass.constructor.name + \"#\" + field);\n            }\n            break;\n        case \"string\":\n            typeofTarget = \"string\";\n            allowNull = true;\n            break;\n        case \"boolean\":\n            // boolean is always encoded as true/false based on truthiness\n            return;\n    }\n    if (typeof (value) !== typeofTarget && (!allowNull || (allowNull && value !== null))) {\n        var foundValue = \"'\" + JSON.stringify(value) + \"'\" + (value && value.constructor && \" (\" + value.constructor.name + \")\");\n        throw new EncodeSchemaError(\"a '\" + typeofTarget + \"' was expected, but \" + foundValue + \" was provided in \" + klass.constructor.name + \"#\" + field);\n    }\n}\nfunction assertInstanceType(value, type, klass, field) {\n    if (!(value instanceof type)) {\n        throw new EncodeSchemaError(\"a '\" + type.name + \"' was expected, but '\" + value.constructor.name + \"' was provided in \" + klass.constructor.name + \"#\" + field);\n    }\n}\nfunction encodePrimitiveType(type, bytes, value, klass, field) {\n    assertType(value, type, klass, field);\n    var encodeFunc = encode[type];\n    if (encodeFunc) {\n        encodeFunc(bytes, value);\n    }\n    else {\n        throw new EncodeSchemaError(\"a '\" + type + \"' was expected, but \" + value + \" was provided in \" + klass.constructor.name + \"#\" + field);\n    }\n}\nfunction decodePrimitiveType(type, bytes, it) {\n    return decode[type](bytes, it);\n}\n/**\n * Schema encoder / decoder\n */\nvar Schema = /** @class */ (function () {\n    // allow inherited classes to have a constructor\n    function Schema() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // fix enumerability of fields for end-user\n        Object.defineProperties(this, {\n            $changes: {\n                value: new ChangeTree_1.ChangeTree(this._indexes),\n                enumerable: false,\n                writable: true\n            },\n            $listeners: {\n                value: {},\n                enumerable: false,\n                writable: true\n            },\n        });\n        var descriptors = this._descriptors;\n        if (descriptors) {\n            Object.defineProperties(this, descriptors);\n        }\n    }\n    Schema.onError = function (e) {\n        console.error(e);\n    };\n    Object.defineProperty(Schema.prototype, \"_schema\", {\n        get: function () { return this.constructor._schema; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_descriptors\", {\n        get: function () { return this.constructor._descriptors; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_indexes\", {\n        get: function () { return this.constructor._indexes; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_fieldsByIndex\", {\n        get: function () { return this.constructor._fieldsByIndex; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_filters\", {\n        get: function () { return this.constructor._filters; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_deprecated\", {\n        get: function () { return this.constructor._deprecated; },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"$changed\", {\n        get: function () { return this.$changes.changed; },\n        enumerable: false,\n        configurable: true\n    });\n    Schema.prototype.listen = function (attr, callback) {\n        var _this = this;\n        if (!this.$listeners[attr]) {\n            this.$listeners[attr] = new EventEmitter_1.EventEmitter();\n        }\n        this.$listeners[attr].register(callback);\n        // return un-register callback.\n        return function () {\n            return _this.$listeners[attr].remove(callback);\n        };\n    };\n    Schema.prototype.decode = function (bytes, it) {\n        if (it === void 0) { it = { offset: 0 }; }\n        var changes = [];\n        var schema = this._schema;\n        var fieldsByIndex = this._fieldsByIndex;\n        var totalBytes = bytes.length;\n        // skip TYPE_ID of existing instances\n        if (bytes[it.offset] === spec_1.TYPE_ID) {\n            it.offset += 2;\n        }\n        var _loop_1 = function () {\n            var isNil = decode.nilCheck(bytes, it) && ++it.offset;\n            var index = bytes[it.offset++];\n            if (index === spec_1.END_OF_STRUCTURE) {\n                return \"break\";\n            }\n            var field = fieldsByIndex[index];\n            var _field = \"_\" + field;\n            var type = schema[field];\n            var value = void 0;\n            var hasChange = false;\n            if (!field) {\n                return \"continue\";\n            }\n            else if (isNil) {\n                value = null;\n                hasChange = true;\n            }\n            else if (type._schema) {\n                value = this_1[_field] || this_1.createTypeInstance(bytes, it, type);\n                value.decode(bytes, it);\n                hasChange = true;\n            }\n            else if (Array.isArray(type)) {\n                type = type[0];\n                var valueRef_1 = this_1[_field] || new ArraySchema_1.ArraySchema();\n                value = valueRef_1.clone(true);\n                var newLength_1 = decode.number(bytes, it);\n                var numChanges = Math.min(decode.number(bytes, it), newLength_1);\n                var hasRemoval = (value.length > newLength_1);\n                hasChange = (numChanges > 0) || hasRemoval;\n                // FIXME: this may not be reliable. possibly need to encode this variable during serialization\n                var hasIndexChange = false;\n                // ensure current array has the same length as encoded one\n                if (hasRemoval) {\n                    // decrease removed items from number of changes.\n                    // no need to iterate through them, as they're going to be removed.\n                    Array.prototype.splice.call(value, newLength_1).forEach(function (itemRemoved, i) {\n                        if (itemRemoved && itemRemoved.onRemove) {\n                            try {\n                                itemRemoved.onRemove();\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        if (valueRef_1.onRemove) {\n                            try {\n                                valueRef_1.onRemove(itemRemoved, newLength_1 + i);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    });\n                }\n                for (var i = 0; i < numChanges; i++) {\n                    var newIndex = decode.number(bytes, it);\n                    var indexChangedFrom = void 0; // index change check\n                    if (decode.indexChangeCheck(bytes, it)) {\n                        decode.uint8(bytes, it);\n                        indexChangedFrom = decode.number(bytes, it);\n                        hasIndexChange = true;\n                    }\n                    var isNew = (!hasIndexChange && value[newIndex] === undefined) || (hasIndexChange && indexChangedFrom === undefined);\n                    if (type.prototype instanceof Schema) {\n                        var item = void 0;\n                        if (isNew) {\n                            item = this_1.createTypeInstance(bytes, it, type);\n                        }\n                        else if (indexChangedFrom !== undefined) {\n                            item = valueRef_1[indexChangedFrom];\n                        }\n                        else {\n                            item = valueRef_1[newIndex];\n                        }\n                        if (!item) {\n                            item = this_1.createTypeInstance(bytes, it, type);\n                            isNew = true;\n                        }\n                        item.decode(bytes, it);\n                        value[newIndex] = item;\n                    }\n                    else {\n                        value[newIndex] = decodePrimitiveType(type, bytes, it);\n                    }\n                    if (isNew) {\n                        if (valueRef_1.onAdd) {\n                            try {\n                                valueRef_1.onAdd(value[newIndex], newIndex);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    }\n                    else if (valueRef_1.onChange) {\n                        try {\n                            valueRef_1.onChange(value[newIndex], newIndex);\n                        }\n                        catch (e) {\n                            Schema.onError(e);\n                        }\n                    }\n                }\n            }\n            else if (type.map) {\n                type = type.map;\n                var valueRef = this_1[_field] || new MapSchema_1.MapSchema();\n                value = valueRef.clone(true);\n                var length = decode.number(bytes, it);\n                hasChange = (length > 0);\n                // FIXME: this may not be reliable. possibly need to encode this variable during\n                // serializagion\n                var hasIndexChange = false;\n                var previousKeys = Object.keys(valueRef);\n                for (var i = 0; i < length; i++) {\n                    // `encodeAll` may indicate a higher number of indexes it actually encodes\n                    // TODO: do not encode a higher number than actual encoded entries\n                    if (bytes[it.offset] === undefined ||\n                        bytes[it.offset] === spec_1.END_OF_STRUCTURE) {\n                        break;\n                    }\n                    var isNilItem = decode.nilCheck(bytes, it) && ++it.offset;\n                    // index change check\n                    var previousKey = void 0;\n                    if (decode.indexChangeCheck(bytes, it)) {\n                        decode.uint8(bytes, it);\n                        previousKey = previousKeys[decode.number(bytes, it)];\n                        hasIndexChange = true;\n                    }\n                    var hasMapIndex = decode.numberCheck(bytes, it);\n                    var isSchemaType = typeof (type) !== \"string\";\n                    var newKey = (hasMapIndex)\n                        ? previousKeys[decode.number(bytes, it)]\n                        : decode.string(bytes, it);\n                    var item = void 0;\n                    var isNew = (!hasIndexChange && valueRef[newKey] === undefined) || (hasIndexChange && previousKey === undefined && hasMapIndex);\n                    if (isNew && isSchemaType) {\n                        item = this_1.createTypeInstance(bytes, it, type);\n                    }\n                    else if (previousKey !== undefined) {\n                        item = valueRef[previousKey];\n                    }\n                    else {\n                        item = valueRef[newKey];\n                    }\n                    if (isNilItem) {\n                        if (item && item.onRemove) {\n                            try {\n                                item.onRemove();\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        if (valueRef.onRemove) {\n                            try {\n                                valueRef.onRemove(item, newKey);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        delete value[newKey];\n                        continue;\n                    }\n                    else if (!isSchemaType) {\n                        value[newKey] = decodePrimitiveType(type, bytes, it);\n                    }\n                    else {\n                        item.decode(bytes, it);\n                        value[newKey] = item;\n                    }\n                    if (isNew) {\n                        if (valueRef.onAdd) {\n                            try {\n                                valueRef.onAdd(value[newKey], newKey);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    }\n                    else if (valueRef.onChange) {\n                        try {\n                            valueRef.onChange(value[newKey], newKey);\n                        }\n                        catch (e) {\n                            Schema.onError(e);\n                        }\n                    }\n                }\n            }\n            else {\n                value = decodePrimitiveType(type, bytes, it);\n                // FIXME: should not even have encoded if value haven't changed in the first place!\n                // check FilterTest.ts: \"should not trigger `onChange` if field haven't changed\"\n                hasChange = (value !== this_1[_field]);\n            }\n            if (hasChange && (this_1.onChange || this_1.$listeners[field])) {\n                changes.push({\n                    field: field,\n                    value: value,\n                    previousValue: this_1[_field]\n                });\n            }\n            this_1[_field] = value;\n        };\n        var this_1 = this;\n        while (it.offset < totalBytes) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n        this._triggerChanges(changes);\n        return this;\n    };\n    Schema.prototype.encode = function (root, encodeAll, client, bytes) {\n        var _this = this;\n        if (root === void 0) { root = this; }\n        if (encodeAll === void 0) { encodeAll = false; }\n        if (bytes === void 0) { bytes = []; }\n        // skip if nothing has changed\n        if (!this.$changes.changed && !encodeAll) {\n            this._encodeEndOfStructure(this, root, bytes);\n            return bytes;\n        }\n        var schema = this._schema;\n        var indexes = this._indexes;\n        var fieldsByIndex = this._fieldsByIndex;\n        var filters = this._filters;\n        var changes = Array.from((encodeAll) //  || client\n            ? this.$changes.allChanges\n            : this.$changes.changes).sort();\n        var _loop_2 = function (i, l) {\n            var field = fieldsByIndex[changes[i]] || changes[i];\n            var _field = \"_\" + field;\n            var type = schema[field];\n            var filter = (filters && filters[field]);\n            // const value = (filter && this.$allChanges[field]) || changes[field];\n            var value = this_2[_field];\n            var fieldIndex = indexes[field];\n            if (value === undefined) {\n                encode.uint8(bytes, spec_1.NIL);\n                encode.number(bytes, fieldIndex);\n            }\n            else if (type._schema) {\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                if (!value) {\n                    // value has been removed\n                    encode.uint8(bytes, spec_1.NIL);\n                    encode.number(bytes, fieldIndex);\n                }\n                else {\n                    // encode child object\n                    encode.number(bytes, fieldIndex);\n                    assertInstanceType(value, type, this_2, field);\n                    this_2.tryEncodeTypeId(bytes, type, value.constructor);\n                    value.encode(root, encodeAll, client, bytes);\n                }\n            }\n            else if (Array.isArray(type)) {\n                var $changes = value.$changes;\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                encode.number(bytes, fieldIndex);\n                // total number of items in the array\n                encode.number(bytes, value.length);\n                var arrayChanges = Array.from((encodeAll) //  || client\n                    ? $changes.allChanges\n                    : $changes.changes)\n                    .filter(function (index) { return _this[_field][index] !== undefined; })\n                    .sort(function (a, b) { return a - b; });\n                // ensure number of changes doesn't exceed array length\n                var numChanges = arrayChanges.length;\n                // number of changed items\n                encode.number(bytes, numChanges);\n                var isChildSchema = typeof (type[0]) !== \"string\";\n                // assert ArraySchema was provided\n                assertInstanceType(this_2[_field], ArraySchema_1.ArraySchema, this_2, field);\n                // encode Array of type\n                for (var j = 0; j < numChanges; j++) {\n                    var index = arrayChanges[j];\n                    var item = this_2[_field][index];\n                    /**\n                     * TODO: filter array by items instead of the whole object\n                     */\n                    // if (client && filter) {\n                    //     // skip if not allowed by custom filter\n                    //     if (!filter.call(this, client, item, root)) {\n                    //         continue;\n                    //     }\n                    // }\n                    if (isChildSchema) { // is array of Schema\n                        encode.number(bytes, index);\n                        if (!encodeAll) {\n                            var indexChange = $changes.getIndexChange(item);\n                            if (indexChange !== undefined) {\n                                encode.uint8(bytes, spec_1.INDEX_CHANGE);\n                                encode.number(bytes, indexChange);\n                            }\n                        }\n                        assertInstanceType(item, type[0], this_2, field);\n                        this_2.tryEncodeTypeId(bytes, type[0], item.constructor);\n                        item.encode(root, encodeAll, client, bytes);\n                    }\n                    else if (item !== undefined) { // is array of primitives\n                        encode.number(bytes, index);\n                        encodePrimitiveType(type[0], bytes, item, this_2, field);\n                    }\n                }\n                if (!encodeAll && !client) {\n                    $changes.discard();\n                }\n            }\n            else if (type.map) {\n                var $changes = value.$changes;\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                // encode Map of type\n                encode.number(bytes, fieldIndex);\n                // TODO: during `encodeAll`, removed entries are not going to be encoded\n                var keys = Array.from((encodeAll) //  || client\n                    ? $changes.allChanges\n                    : $changes.changes);\n                encode.number(bytes, keys.length);\n                // const previousKeys = Object.keys(this[_field]); // this is costly!\n                var previousKeys = Array.from($changes.allChanges);\n                var isChildSchema = typeof (type.map) !== \"string\";\n                var numChanges = keys.length;\n                // assert MapSchema was provided\n                assertInstanceType(this_2[_field], MapSchema_1.MapSchema, this_2, field);\n                for (var i_1 = 0; i_1 < numChanges; i_1++) {\n                    var key = keys[i_1];\n                    var item = this_2[_field][key];\n                    var mapItemIndex = undefined;\n                    /**\n                     * TODO: filter map by items instead of the whole object\n                     */\n                    // if (client && filter) {\n                    //     // skip if not allowed by custom filter\n                    //     if (!filter.call(this, client, item, root)) {\n                    //         continue;\n                    //     }\n                    // }\n                    if (encodeAll) {\n                        if (item === undefined) {\n                            // previously deleted items are skipped during `encodeAll`\n                            continue;\n                        }\n                    }\n                    else {\n                        // encode index change\n                        var indexChange = $changes.getIndexChange(item);\n                        if (item && indexChange !== undefined) {\n                            encode.uint8(bytes, spec_1.INDEX_CHANGE);\n                            encode.number(bytes, this_2[_field]._indexes.get(indexChange));\n                        }\n                        /**\n                         * - Allow item replacement\n                         * - Allow to use the index of a deleted item to encode as NIL\n                         */\n                        mapItemIndex = (!$changes.isDeleted(key) || !item)\n                            ? this_2[_field]._indexes.get(key)\n                            : undefined;\n                    }\n                    var isNil = (item === undefined);\n                    /**\n                     * Invert NIL to prevent collision with data starting with NIL byte\n                     */\n                    if (isNil) {\n                        // TODO: remove item\n                        // console.log(\"REMOVE KEY INDEX\", { key });\n                        // this[_field]._indexes.delete(key);\n                        encode.uint8(bytes, spec_1.NIL);\n                    }\n                    if (mapItemIndex !== undefined) {\n                        encode.number(bytes, mapItemIndex);\n                    }\n                    else {\n                        encode.string(bytes, key);\n                    }\n                    if (item && isChildSchema) {\n                        assertInstanceType(item, type.map, this_2, field);\n                        this_2.tryEncodeTypeId(bytes, type.map, item.constructor);\n                        item.encode(root, encodeAll, client, bytes);\n                    }\n                    else if (!isNil) {\n                        encodePrimitiveType(type.map, bytes, item, this_2, field);\n                    }\n                }\n                if (!encodeAll && !client) {\n                    $changes.discard();\n                    // TODO: track array/map indexes per client (for filtering)?\n                    // TODO: do not iterate though all MapSchema indexes here.\n                    this_2[_field]._updateIndexes(previousKeys);\n                }\n            }\n            else {\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                encode.number(bytes, fieldIndex);\n                encodePrimitiveType(type, bytes, value, this_2, field);\n            }\n        };\n        var this_2 = this;\n        for (var i = 0, l = changes.length; i < l; i++) {\n            _loop_2(i, l);\n        }\n        // flag end of Schema object structure\n        this._encodeEndOfStructure(this, root, bytes);\n        if (!encodeAll && !client) {\n            this.$changes.discard();\n        }\n        return bytes;\n    };\n    Schema.prototype.encodeFiltered = function (client, bytes) {\n        return this.encode(this, false, client, bytes);\n    };\n    Schema.prototype.encodeAll = function (bytes) {\n        return this.encode(this, true, undefined, bytes);\n    };\n    Schema.prototype.encodeAllFiltered = function (client, bytes) {\n        return this.encode(this, true, client, bytes);\n    };\n    Schema.prototype.clone = function () {\n        var cloned = new (this.constructor);\n        var schema = this._schema;\n        for (var field in schema) {\n            if (typeof (this[field]) === \"object\" &&\n                typeof (this[field].clone) === \"function\") {\n                // deep clone\n                cloned[field] = this[field].clone();\n            }\n            else {\n                // primitive values\n                cloned[field] = this[field];\n            }\n        }\n        return cloned;\n    };\n    Schema.prototype.triggerAll = function () {\n        var changes = [];\n        var schema = this._schema;\n        for (var field in schema) {\n            if (this[field] !== undefined) {\n                changes.push({\n                    field: field,\n                    value: this[field],\n                    previousValue: undefined\n                });\n            }\n        }\n        try {\n            this._triggerChanges(changes);\n        }\n        catch (e) {\n            Schema.onError(e);\n        }\n    };\n    Schema.prototype.toJSON = function () {\n        var schema = this._schema;\n        var deprecated = this._deprecated;\n        var obj = {};\n        for (var field in schema) {\n            if (!deprecated[field] && this[field] !== null && typeof (this[field]) !== \"undefined\") {\n                obj[field] = (typeof (this[field].toJSON) === \"function\")\n                    ? this[field].toJSON()\n                    : this[\"_\" + field];\n            }\n        }\n        return obj;\n    };\n    Schema.prototype.discardAllChanges = function () {\n        var schema = this._schema;\n        var changes = Array.from(this.$changes.changes);\n        var fieldsByIndex = this._fieldsByIndex;\n        for (var index in changes) {\n            var field = fieldsByIndex[changes[index]];\n            var type = schema[field];\n            var value = this[field];\n            // skip unchagned fields\n            if (value === undefined) {\n                continue;\n            }\n            if (type._schema) {\n                value.discardAllChanges();\n            }\n            else if (Array.isArray(type)) {\n                for (var i = 0, l = value.length; i < l; i++) {\n                    var index_1 = value[i];\n                    var item = this[\"_\" + field][index_1];\n                    if (typeof (type[0]) !== \"string\" && item) { // is array of Schema\n                        item.discardAllChanges();\n                    }\n                }\n                value.$changes.discard();\n            }\n            else if (type.map) {\n                var keys = value;\n                var mapKeys = Object.keys(this[\"_\" + field]);\n                for (var i = 0; i < keys.length; i++) {\n                    var key = mapKeys[keys[i]] || keys[i];\n                    var item = this[\"_\" + field][key];\n                    if (item instanceof Schema && item) {\n                        item.discardAllChanges();\n                    }\n                }\n                value.$changes.discard();\n            }\n        }\n        this.$changes.discard();\n    };\n    Schema.prototype._encodeEndOfStructure = function (instance, root, bytes) {\n        if (instance !== root) {\n            bytes.push(spec_1.END_OF_STRUCTURE);\n        }\n    };\n    Schema.prototype.tryEncodeTypeId = function (bytes, type, targetType) {\n        if (type._typeid !== targetType._typeid) {\n            encode.uint8(bytes, spec_1.TYPE_ID);\n            encode.uint8(bytes, targetType._typeid);\n        }\n    };\n    Schema.prototype.createTypeInstance = function (bytes, it, type) {\n        if (bytes[it.offset] === spec_1.TYPE_ID) {\n            it.offset++;\n            var anotherType = this.constructor._context.get(decode.uint8(bytes, it));\n            return new anotherType();\n        }\n        else {\n            return new type();\n        }\n    };\n    Schema.prototype._triggerChanges = function (changes) {\n        if (changes.length > 0) {\n            for (var i = 0; i < changes.length; i++) {\n                var change = changes[i];\n                var listener = this.$listeners[change.field];\n                if (listener) {\n                    try {\n                        listener.invoke(change.value, change.previousValue);\n                    }\n                    catch (e) {\n                        Schema.onError(e);\n                    }\n                }\n            }\n            if (this.onChange) {\n                try {\n                    this.onChange(changes);\n                }\n                catch (e) {\n                    Schema.onError(e);\n                }\n            }\n        }\n    };\n    return Schema;\n}());\nexports.Schema = Schema;\n"},"sourceMaps":{"js":{"version":3,"file":"Schema.js","sourceRoot":"","sources":["../src/Schema.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"be4e734586c9db6d62e8de23f3461886","cacheData":{"env":{}}}